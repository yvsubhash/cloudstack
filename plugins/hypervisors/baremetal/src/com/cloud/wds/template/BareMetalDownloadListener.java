// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Automatically generated by addcopyright.py at 01/29/2013
// Apache License, Version 2.0 (the "License"); you may not use this
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.wds.template;

/**
 * Created by Raghav on 8/13/2015.
 */

import com.cloud.agent.AgentManager;
import com.cloud.agent.Listener;
import com.cloud.agent.api.AgentControlAnswer;
import com.cloud.agent.api.AgentControlCommand;
import com.cloud.agent.api.Answer;
import com.cloud.agent.api.Command;
import com.cloud.agent.api.StartupCommand;
import com.cloud.agent.api.StartupPxeServerCommand;
import com.cloud.baremetal.database.BaremetalPxeVO;
import com.cloud.baremetal.networkservice.BaremetalPxeManager;
import com.cloud.exception.ConnectionException;
import com.cloud.host.Host;
import com.cloud.host.Status;
import com.cloud.storage.VMTemplateVO;
import com.cloud.storage.dao.VMTemplateDao;
import com.cloud.utils.db.QueryBuilder;
import com.cloud.utils.db.SearchCriteria;
import com.cloud.wds.networkservice.WdsTemplateAdapter;
import org.apache.cloudstack.engine.subsystem.api.storage.ObjectInDataStoreStateMachine;
import org.apache.cloudstack.storage.datastore.db.TemplateDataStoreVO;
import org.apache.log4j.Logger;

import javax.inject.Inject;
import java.util.List;

public class BareMetalDownloadListener implements Listener {

    private final static Logger s_logger = Logger.getLogger(BareMetalDownloadListener.class);

    @Inject
    AgentManager _agentMgr;

    @Inject
    WdsTemplateAdapter _wdsTemplateAdapter;

    @Inject
    VMTemplateDao _vmTemplateDao;

    public void init() {
        _agentMgr.registerForHostEvents(this, true, false, false);
    }

    @Override
    public boolean processAnswers(long agentId, long seq, Answer[] answers) {
        return true;
    }

    @Override
    public boolean processCommands(long agentId, long seq, Command[] commands) {
        return false;
    }

    @Override
    public AgentControlAnswer processControlCommand(long agentId, AgentControlCommand cmd) {
        return null;
    }

    @Override
    public void processConnect(Host host, StartupCommand cmd, boolean forRebalance) throws ConnectionException {
        if (cmd instanceof StartupPxeServerCommand) { //listen to PXE server startup
            if (host.getType().equals(Host.Type.BaremetalPxe)) {
                QueryBuilder<BaremetalPxeVO> sc = QueryBuilder.create(BaremetalPxeVO.class);
                sc.and(sc.entity().getHostId(), SearchCriteria.Op.EQ, host.getId());
                BaremetalPxeVO baremetalPxeVO = sc.find();
                if (baremetalPxeVO != null && baremetalPxeVO.getDeviceType().equalsIgnoreCase(BaremetalPxeManager.BaremetalPxeType.WDS.toString())) {

                    QueryBuilder<TemplateDataStoreVO> tsc = QueryBuilder.create(TemplateDataStoreVO.class);
                    tsc.and(tsc.entity().getDataStoreId(), SearchCriteria.Op.EQ, host.getId());
                    List<TemplateDataStoreVO> templates = tsc.list();

                    for (TemplateDataStoreVO template : templates) {
                        if (template.getState().equals(ObjectInDataStoreStateMachine.State.Allocated)) { // The initial state BareMetalTemplate Adaptor creates before it's updated

                            QueryBuilder<VMTemplateVO> vmtsc = QueryBuilder.create(VMTemplateVO.class);
                            vmtsc.and(vmtsc.entity().getId(), SearchCriteria.Op.EQ, template.getTemplateId());
                            VMTemplateVO vmTemplateVO = vmtsc.find();
                            _vmTemplateDao.loadDetails(vmTemplateVO);
                            _wdsTemplateAdapter.importImageInWDS(vmTemplateVO, host.getId());

                        }
                    }

                }
            }
        }
    }

    @Override
    public boolean processDisconnect(long agentId, Status state) {
        return true;
    }

    @Override
    public void processHostAboutToBeRemoved(long hostId) {
    }

    @Override
    public void processHostRemoved(long hostId, long clusterId) {

    }

    @Override
    public boolean isRecurring() {
        return false;
    }

    @Override
    public int getTimeout() {
        return -1;
    }

    @Override
    public boolean processTimeout(long agentId, long seq) {
        return true;
    }

    @Override
    public void processHostAdded(long hostId) {
    }
}
