// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Automatically generated by addcopyright.py at 01/29/2013
// Apache License, Version 2.0 (the "License"); you may not use this
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.wds.template;

import com.cloud.agent.AgentManager;
import com.cloud.agent.api.Answer;
import com.cloud.agent.api.Command;
import com.cloud.exception.AgentUnavailableException;
import com.cloud.exception.OperationCancelledException;
import com.cloud.exception.OperationTimedoutException;
import com.cloud.utils.exception.CloudRuntimeException;
import com.cloud.wds.networkservice.WdsTemplateAdapter;
import org.apache.cloudstack.framework.async.AsyncCallbackDispatcher;
import org.apache.log4j.Logger;

import java.util.Timer;
import java.util.TimerTask;

/**
 * Created by Raghav on 8/13/2015.
 */
public class PollingExecutor<T> {

    private class PollingTask extends TimerTask {

        @Override
        public void run() {
            try {
                Answer answer = agentManager.send(hostId, command);
                // if in progress then continue
                boolean inProgress = Boolean.valueOf(answer.getContextParam(WdsTemplateAdapter.WdsAnswerCallbackParams.inProgress.toString()));
                if(inProgress) {
                    return;
                }

                timer.cancel(); // stop next call
                caller.complete(answer);

            } catch (AgentUnavailableException | OperationTimedoutException | OperationCancelledException e) {
                s_logger.debug("Exception occurred. Cancelling the timer and completing the task.", e);
                timer.cancel();
                caller.complete(new Answer(command, e));
            }
        }
    }

    private static final Logger s_logger = Logger.getLogger(PollingExecutor.class);

    private static final int timer_interval = 10000;

    private AgentManager agentManager;

    private Command command;

    private Long hostId;

    private AsyncCallbackDispatcher<T, Answer> caller;

    private Timer timer;

    public PollingExecutor(Command command, Long hostId, AsyncCallbackDispatcher<T, Answer> caller, AgentManager agentManager) {
        this.command = command;
        this.hostId = hostId;
        this.caller = caller;
        this.agentManager = agentManager;
    }

    public void start() {
        if (hostId == null) {
            throw new CloudRuntimeException("host ids cannot be null");
        }
        if (caller == null) {
            throw new CloudRuntimeException("caller cannot be null");
        }
        if (command == null) {
            throw new CloudRuntimeException("command cannot be null");
        }

        timer = new Timer(String.valueOf(hostId) + "-" + command.toString());
        PollingTask task = new PollingTask();
        timer.scheduleAtFixedRate(task, 0, timer_interval);
    }

}
