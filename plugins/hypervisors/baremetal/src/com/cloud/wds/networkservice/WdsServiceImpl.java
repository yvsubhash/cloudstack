// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Automatically generated by addcopyright.py at 01/29/2013
// Apache License, Version 2.0 (the "License"); you may not use this
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.wds.networkservice;

import com.cloud.agent.api.Answer;
import com.cloud.agent.api.baremetal.IpmISetBootDevCommand;
import com.cloud.agent.api.routing.VmDataCommand;
import com.cloud.baremetal.database.BaremetalPxeVO;
import com.cloud.baremetal.networkservice.BaremetalKickStartServiceImpl;
import com.cloud.baremetal.networkservice.BaremetalPxeManager;
import com.cloud.baremetal.networkservice.BaremetalPxeService;
import com.cloud.dc.DataCenter;
import com.cloud.dc.dao.DataCenterDao;
import com.cloud.deploy.DeployDestination;
import com.cloud.exception.AgentUnavailableException;
import com.cloud.exception.OperationCancelledException;
import com.cloud.exception.OperationTimedoutException;
import com.cloud.host.Host;
import com.cloud.host.dao.HostDao;
import com.cloud.network.Network;
import com.cloud.network.NetworkModel;
import com.cloud.network.PhysicalNetworkServiceProvider;
import com.cloud.network.dao.PhysicalNetworkServiceProviderVO;
import com.cloud.network.dao.PhysicalNetworkVO;
import com.cloud.resource.ServerResource;
import com.cloud.service.dao.ServiceOfferingDao;
import com.cloud.storage.dao.VMTemplateDetailsDao;
import com.cloud.template.VirtualMachineTemplate;
import com.cloud.utils.StringUtils;
import com.cloud.utils.db.DB;
import com.cloud.utils.db.QueryBuilder;
import com.cloud.utils.db.SearchCriteria;
import com.cloud.utils.exception.CloudRuntimeException;
import com.cloud.vm.NicProfile;
import com.cloud.vm.NicVO;
import com.cloud.vm.ReservationContext;
import com.cloud.vm.UserVmVO;
import com.cloud.vm.VirtualMachineProfile;
import com.cloud.vm.dao.NicDao;
import com.cloud.vm.dao.UserVmDao;
import com.cloud.wds.api.PrestageDeviceCommand;
import org.apache.cloudstack.api.AddBaremetalPxeCmd;
import org.apache.cloudstack.framework.config.dao.ConfigurationDao;
import org.apache.log4j.Logger;

import javax.ejb.Local;
import javax.inject.Inject;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Raghav on 8/13/2015.
 */
@Local(value = BaremetalPxeService.class)
public class WdsServiceImpl extends BaremetalKickStartServiceImpl {

    private static final Logger s_logger = Logger.getLogger(WdsServiceImpl.class);

    @Inject
    VMTemplateDetailsDao _templateDetailsDao;
    @Inject
    UserVmDao _vmDao;
    @Inject
    ServiceOfferingDao _serviceOfferingDao;
    @Inject
    NetworkModel _ntwkModel;
    @Inject
    ConfigurationDao _configDao;
    @Inject
    DataCenterDao _dcDao;
    @Inject
    NicDao _nicDao;
    @Inject
    HostDao _hostDao;

    @Override
    public boolean prepare(VirtualMachineProfile profile, NicProfile nic, Network network, DeployDestination dest, ReservationContext context, List<BaremetalPxeVO> bareMetalPxeVOs) {
        if(dest.getDataCenter().getNetworkType().equals(DataCenter.NetworkType.Advanced)) { //Advanced zone not supported for WDS
            return false;
        } else {
            VirtualMachineTemplate template = profile.getTemplate();
            Map<String, String> details = _templateDetailsDao.listDetailsKeyPairs(template.getId());

            PrestageDeviceCommand cmd = new PrestageDeviceCommand();

            String wdsClientUnattend = details.get(WdsTemplateAdapter.WdsPrestageParams.WdsClientUnattend.toString());
            String bootImagePath = details.get(WdsTemplateAdapter.WdsPrestageParams.BootImagePath.toString());

            if(wdsClientUnattend == null || bootImagePath == null) {
                s_logger.error("Template is missing required details for pre-staging");
                return false;
            }

            IpmISetBootDevCommand bootCmd = new IpmISetBootDevCommand(IpmISetBootDevCommand.BootDev.pxe);

            try {
                Answer bootCmdAnswer = _agentMgr.send(dest.getHost().getId(), bootCmd);
                if (!bootCmdAnswer.getResult()) {
                    s_logger.warn("Unable to set host: " + dest.getHost().getId() + " to PXE boot because " + bootCmdAnswer.getDetails());
                    return false;
                } else {
                    s_logger.warn("Successfully set host: " + dest.getHost().getId() + " to PXE boot");
                }
            } catch (AgentUnavailableException | OperationCancelledException | OperationTimedoutException e) {
                s_logger.error("Error while setting host to pxe boot mode");
                return false;
            }

            boolean finalResult = false;

            cmd.setBootImagePath(bootImagePath);
            cmd.setWdsClientUnattend(wdsClientUnattend);
            List<String> hostMacs = new ArrayList<>();
            hostMacs.add(dest.getHost().getPrivateMacAddress().replaceAll(":", ""));
            hostMacs.add(dest.getHost().getPublicMacAddress().replaceAll(":", ""));
            cmd.setHostMac(hostMacs);

            for(BaremetalPxeVO pxeVO : bareMetalPxeVOs) {
                try {
                    Answer ans = _agentMgr.send(pxeVO.getHostId(), cmd);
                    finalResult = finalResult || ans.getResult(); // it should succeed in at least one PXE
                } catch (Exception e) {
                    s_logger.error("Error while pre-staging device " + cmd.getHostMac() + "on host with id " + pxeVO.getHostId());
                }
            }

            return finalResult;
        }
    }

    @Override
    @DB
    public BaremetalPxeVO addPxeServer(AddBaremetalPxeCmd cmd) { // we can extend AddBaremetalPxeCmd to pass additional info to WDS

        //cast command to wds specific command

        PhysicalNetworkVO pNetwork = null;
        long zoneId;

        if (cmd.getPhysicalNetworkId() == null || cmd.getUrl() == null || cmd.getUsername() == null || cmd.getPassword() == null) {
            throw new IllegalArgumentException("At least one of the required parameters(physical network id, url, username, password) is null");
        }

        //check for preshared key also

        pNetwork = _physicalNetworkDao.findById(cmd.getPhysicalNetworkId());
        if (pNetwork == null) {
            throw new IllegalArgumentException("Could not find physical network with ID: " + cmd.getPhysicalNetworkId());
        }
        zoneId = pNetwork.getDataCenterId();

        PhysicalNetworkServiceProviderVO ntwkSvcProvider =
                _physicalNetworkServiceProviderDao.findByServiceProvider(pNetwork.getId(), Network.Provider.BAREMETAL_PXE_SERVICE_PROVIDER.getName());
        if (ntwkSvcProvider == null) {
            throw new CloudRuntimeException("Network Service Provider: " + Network.Provider.BAREMETAL_PXE_SERVICE_PROVIDER.getName() +
                    " is not enabled in the physical network: " + cmd.getPhysicalNetworkId() + "to add this device");
        } else if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
            throw new CloudRuntimeException("Network Service Provider: " + ntwkSvcProvider.getProviderName() + " is in shutdown state in the physical network: " +
                    cmd.getPhysicalNetworkId() + "to add this device");
        }

        QueryBuilder<BaremetalPxeVO> sc = QueryBuilder.create(BaremetalPxeVO.class);
        sc.and(sc.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ, cmd.getPhysicalNetworkId());
        List<BaremetalPxeVO> vos = sc.list();

        if(!vos.isEmpty()) {
            for(BaremetalPxeVO pxeVO : vos) {
                if(!pxeVO.getDeviceType().equalsIgnoreCase(BaremetalPxeManager.BaremetalPxeType.WDS.toString())) {
                    throw new CloudRuntimeException("WDS server can only be added when other PXE servers in the zone are WDS");
                }
            }
        }

        URI uri;
        try {
            uri = new URI(cmd.getUrl());
        } catch (Exception e) {
            s_logger.debug(e);
            throw new IllegalArgumentException(e.getMessage());
        }
        String ipAddress = uri.getHost();
        if (ipAddress == null) {
            ipAddress = cmd.getUrl();
        }

        String guid = getPxeServerGuid(Long.toString(zoneId), BaremetalPxeManager.BaremetalPxeType.WDS.toString(), ipAddress);

        ServerResource resource = null;
        Map params = new HashMap<>();
        params.put(BaremetalPxeService.PXE_PARAM_ZONE, Long.toString(zoneId));
        params.put(BaremetalPxeService.PXE_PARAM_IP, ipAddress);
        params.put(BaremetalPxeService.PXE_PARAM_USERNAME, cmd.getUsername());
        params.put(BaremetalPxeService.PXE_PARAM_PASSWORD, cmd.getPassword());
        params.put(BaremetalPxeService.PXE_PARAM_GUID, guid);
        params.put(BaremetalPxeService.WDS_INITIAL_REGISTER, true);
        // pass pre-shared key also

        resource = new WdsResource(); // Initializing WDS server

        try {
            resource.configure(guid, params); //TODO: check if pass static name or guid
        } catch (Exception e) {
            throw new CloudRuntimeException(e.getMessage(), e);
        }

        params.remove(BaremetalPxeService.WDS_INITIAL_REGISTER); // don't store in host details

        Host pxeServer = _resourceMgr.addHost(zoneId, resource, Host.Type.BaremetalPxe, params);
        if (pxeServer == null) {
            throw new CloudRuntimeException("Cannot add PXE server as a host");
        }

        BaremetalPxeVO vo = new BaremetalPxeVO();
        vo.setHostId(pxeServer.getId());
        vo.setNetworkServiceProviderId(ntwkSvcProvider.getId());
        vo.setPhysicalNetworkId(cmd.getPhysicalNetworkId());
        vo.setDeviceType(BaremetalPxeManager.BaremetalPxeType.WDS.toString());
        _pxeDao.persist(vo);
        return vo;

    }

    @Override
    public String getPxeServiceType() {
        return BaremetalPxeManager.BaremetalPxeType.WDS.toString();
    }

    @Override
    public boolean addUserData(NicProfile nic, VirtualMachineProfile profile, List<BaremetalPxeVO> bareMetalPxeVOs) {
        UserVmVO vm = _vmDao.findById(profile.getVirtualMachine().getId());
        _vmDao.loadDetails(vm);

        String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();
        String zoneName = _dcDao.findById(vm.getDataCenterId()).getName();
        NicVO nvo = _nicDao.findById(nic.getId());
        VmDataCommand cmd = new VmDataCommand(nvo.getIPv4Address(), vm.getInstanceName(), _ntwkModel.getExecuteInSeqNtwkElmtCmd());

        Host host = _hostDao.findById(profile.getVirtualMachine().getHostId());
        if (host == null) {
            host = _hostDao.findById(profile.getVirtualMachine().getLastHostId());
        }
        List<String> vmMacAddresses = new ArrayList<>();
        vmMacAddresses.add(host.getPublicMacAddress().replaceAll(":", ""));
        vmMacAddresses.add(host.getPrivateMacAddress().replaceAll(":", ""));
        cmd.setVMMacAddresses(vmMacAddresses);
        // if you add new metadata files, also edit systemvm/patches/debian/config/var/www/html/latest/.htaccess
        cmd.addVmData("userdata", "user-data", vm.getUserData());
        cmd.addVmData("metadata", "service-offering", StringUtils.unicodeEscape(serviceOffering));
        cmd.addVmData("metadata", "availability-zone", StringUtils.unicodeEscape(zoneName));
        cmd.addVmData("metadata", "local-ipv4", nic.getIPv4Address());
        cmd.addVmData("metadata", "local-hostname", StringUtils.unicodeEscape(vm.getInstanceName()));
        cmd.addVmData("metadata", "public-ipv4", nic.getIPv4Address());
        cmd.addVmData("metadata", "public-hostname", StringUtils.unicodeEscape(vm.getInstanceName()));
        cmd.addVmData("metadata", "instance-id", String.valueOf(vm.getUuid()));
        cmd.addVmData("metadata", "vm-id", String.valueOf(vm.getUuid()));
        cmd.addVmData("metadata", "public-keys", vm.getDetail("SSH.PublicKey"));
        String cloudIdentifier = _configDao.getValue("cloud.identifier");
        if (cloudIdentifier == null) {
            cloudIdentifier = "";
        } else {
            cloudIdentifier = "CloudStack-{" + cloudIdentifier + "}";
        }
        cmd.addVmData("metadata", "cloud-identifier", cloudIdentifier);

        boolean finalResult = false;
        for(BaremetalPxeVO pxeVO : bareMetalPxeVOs) {
            try {
                Answer ans = _agentMgr.send(pxeVO.getHostId(), cmd);
                finalResult = finalResult || ans.getResult(); // it should succeed in at least one PXE
            } catch (Exception e) {
                s_logger.error(String.format("Add userdata to vm:%s failed", vm.getInstanceName()), e);
            }
        }

        return finalResult;
    }
}
