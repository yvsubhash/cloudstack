// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Automatically generated by addcopyright.py at 01/29/2013
// Apache License, Version 2.0 (the "License"); you may not use this
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.wds.networkservice;

import com.cloud.agent.api.Answer;
import com.cloud.agent.api.Command;
import com.cloud.agent.api.HostVmStateReportEntry;
import com.cloud.agent.api.PingCommand;
import com.cloud.agent.api.PingRoutingCommand;
import com.cloud.agent.api.routing.VmDataCommand;
import com.cloud.baremetal.networkservice.BaremetalPxeResourceBase;
import com.cloud.baremetal.networkservice.BaremetalPxeService;
import com.cloud.moonshot.client.model.HttpScheme;
import com.cloud.utils.exception.CloudRuntimeException;
import com.cloud.wds.api.ImportImageCommand;
import com.cloud.wds.api.PrestageDeviceCommand;
import com.cloud.wds.api.RemoveImageCommand;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.AllowAllHostnameVerifier;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.PoolingClientConnectionManager;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import javax.naming.ConfigurationException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.io.IOException;
import java.net.URISyntaxException;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Raghav on 8/13/2015.
 */
public class WdsResource extends BaremetalPxeResourceBase {
    private static final Logger s_logger = Logger.getLogger(WdsResource.class);
    private static final String SECRET_KEY = "secret_key";
    private static final int PORT = 8250;

    private boolean initialRegister = false;

    private DefaultHttpClient httpClient;
    private HttpHost targetHost;

    @Override
    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {
        boolean result = super.configure(name, params);
        // also get pre-shared key
        if(result) {
            initializeClient();
            try {
                HttpGet ping = new HttpGet("/ping");
                HttpResponse response = executeHttpRequest(ping);
                if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                    throw new ConfigurationException("Invalid Configuration for WDS server, please check the details provided");
                }

                ping.releaseConnection();

                if(params.containsKey(BaremetalPxeService.WDS_INITIAL_REGISTER)) {
                    initialRegister = (Boolean) params.get(BaremetalPxeService.WDS_INITIAL_REGISTER);
                }

                try {
                    if (initialRegister) {
                        HttpPost register = new HttpPost("/register");
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put(SECRET_KEY, "cloudstack");
                        jsonObject.put("new_secret_key", _password);
                        StringEntity entity = new StringEntity(jsonObject.toString());
                        register.setEntity(entity);
                        register.setHeader("Content-type", "application/json");
                        response = executeHttpRequest(register);

                        if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                            throw new ConfigurationException("error while registering WDS using default key");
                        }

                        register.releaseConnection();
                    }
                } catch (Exception e) {
                    throw new ConfigurationException("error while registering WDS using default key");
                }

                return true;
            } catch (IOException e) {
                throw new CloudRuntimeException(e);
            }
        } else {
            return result;
        }
    }

    @Override
    public PingCommand getCurrentStatus(long id) {
        HttpGet ping = new HttpGet("/ping");
        try {
            HttpResponse response = executeHttpRequest(ping);
            if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return new PingRoutingCommand(getType(), id, new HashMap<String, HostVmStateReportEntry>());
            } else {
                return null;
            }
        } catch (IOException e) {
            return null;
        } finally {
            ping.releaseConnection();
        }
    }

    @Override
    public Answer executeRequest(Command cmd) {
        if(cmd instanceof PrestageDeviceCommand) {
            return execute((PrestageDeviceCommand) cmd);
        } else if(cmd instanceof ImportImageCommand){
            return execute((ImportImageCommand) cmd);
        } else if(cmd instanceof RemoveImageCommand){
            return execute((RemoveImageCommand) cmd);
        } else if (cmd instanceof VmDataCommand) {
            return execute((VmDataCommand) cmd);
        } else {
            return super.executeRequest(cmd);
        }
    }
    private Answer execute(VmDataCommand cmd) {
        Answer answer = null;
        try {
            for(String macAddress : cmd.getVmMacAddresses()) {
                if(com.cloud.utils.StringUtils.isNotBlank(macAddress)) {
                    answer = addUserData(macAddress, cmd);
                    if(!answer.getResult()) {
                        return answer;
                    }
                }
            }
        } catch (IOException e) {
            s_logger.debug("Failed to add user data on windows", e);
            answer = new Answer(cmd, false, e.getMessage());
        } catch (URISyntaxException e) {
            s_logger.debug("Failed to add user data on windows", e);
            answer = new Answer(cmd, false, e.getMessage());
        }  catch (JSONException e) {
            answer = new Answer(cmd, e);
        }

        return answer;
    }

    private Answer addUserData(String macAddress, VmDataCommand cmd) throws URISyntaxException, IOException, JSONException {

        JSONObject requestJson = new JSONObject();
        JSONArray vmDataArray = new JSONArray();
        List<String[]> vmData = cmd.getVmData();

        for (String[] data : vmData) {

            String folder = data[0];
            String file = data[1];
            String contents = (data[2] == null) ? "none" : data[2];

            JSONObject object = new JSONObject();
            object.put("mac_address", macAddress.replaceAll(":", ""));
            object.put("folder", folder);
            object.put("file", file);
            object.put("contents", contents);

            vmDataArray.put(object);

        }

        requestJson.put("vm_data", vmDataArray);

        s_logger.debug("User Data request: " + requestJson.toString());

        requestJson.put(SECRET_KEY, _password);

        HttpPost addVmDataRequest = new HttpPost("/addvmdata");

        StringEntity entity = new StringEntity(requestJson.toString());
        addVmDataRequest.setEntity(entity);
        addVmDataRequest.setHeader("Content-type", "application/json");

        HttpResponse response = executeHttpRequest(addVmDataRequest);

        JSONObject jsonObject = new JSONObject(EntityUtils.toString(response.getEntity()));

        if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) { //error adding VM data
            String wdsError = jsonObject.getString("message");
            return new Answer(cmd, false, "Failed to add user data " + wdsError);
        }

        addVmDataRequest.releaseConnection();

        String status = jsonObject.getString("status");

        boolean success = false;

        if(status.equalsIgnoreCase(WdsTemplateAdapter.WdsAgentResponse.Pass.toString())) {
            success = true;
        }

        Answer ans = new Answer(cmd, success, status);

        return ans;
    }

    private Answer execute(PrestageDeviceCommand cmd) {
        Answer answer = null;
        try {
            List<String> deviceMacs = cmd.getHostMac();
            for(String deviceMac : deviceMacs) {
                if(com.cloud.utils.StringUtils.isNotBlank(deviceMac)) {
                    answer = prestageDevice(deviceMac, cmd);
                    if(!answer.getResult()) {
                        return answer;
                    }
                }
            }
        } catch (IOException e) {
            s_logger.debug("Prepare for kickstart server failed on windows", e);
            answer = new Answer(cmd, false, e.getMessage());
        } catch (URISyntaxException e) {
            s_logger.debug("Prepare for kickstart server failed on windows", e);
            answer = new Answer(cmd, false, e.getMessage());
        }
        return answer;
    }

    private Answer prestageDevice(String deviceMac, PrestageDeviceCommand cmd) throws URISyntaxException, IOException {
        String wdsEndpoint = "/wdsutil";
        List<NameValuePair> queryParameters = new ArrayList<>();
        queryParameters.add(new BasicNameValuePair("get-device", null));
        queryParameters.add(new BasicNameValuePair("id", deviceMac));

        HttpGet wdsDeviceExists = new HttpGet(buildGetRequestPath(wdsEndpoint, queryParameters));
        queryParameters.clear();

        HttpResponse response = executeHttpRequest(wdsDeviceExists);

        if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) { // the device is not present, add device
            queryParameters.add(new BasicNameValuePair("add-device", null));
        } else { // device exists, set-device
            queryParameters.add(new BasicNameValuePair("set-device", null));
        }

        wdsDeviceExists.releaseConnection();

        queryParameters.add(new BasicNameValuePair("device", deviceMac));
        queryParameters.add(new BasicNameValuePair("id", deviceMac));
        queryParameters.add(new BasicNameValuePair(WdsTemplateAdapter.WdsPrestageParams.BootImagePath.toString(), cmd.getBootImagePath()));
        queryParameters.add(new BasicNameValuePair(WdsTemplateAdapter.WdsPrestageParams.WdsClientUnattend.toString(), cmd.getWdsClientUnattend()));

        if(!cmd.getAdditionalArguments().isEmpty()) {
            Map<String, String> args = cmd.getAdditionalArguments();
            for(Map.Entry<String, String> entry : args.entrySet()) {
                queryParameters.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
            }
        }

        String wdsAgentUrl = buildGetRequestPath(wdsEndpoint, queryParameters);
        HttpGet createOrUpdatePrestage = new HttpGet(wdsAgentUrl);

        response = executeHttpRequest(createOrUpdatePrestage);

        if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
            return new Answer(cmd, false, "unable to prestage device, the command is " + wdsAgentUrl);
        }

        createOrUpdatePrestage.releaseConnection();

        s_logger.debug("Prepare kickstart PXE server successfully");
        return new Answer(cmd, true, "Success");
    }

    private Answer execute(ImportImageCommand cmd) {
        try {

            JSONObject requestJson = new JSONObject();

            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.InstallImageFile.toString(), cmd.getInstallImageFile());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.BootImageFile.toString(), cmd.getBootImageFile());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.BootImageName.toString(), cmd.getBootImageName());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.InstallImageName.toString(), cmd.getInstallImageName());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.ClientUnattendFile.toString(), cmd.getClientUnattendFile());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.ImageUnattendFile.toString(), cmd.getImageUnattendFile());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.ImageGroupName.toString(), cmd.getImageGroupName());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.Architecture.toString(), cmd.getArchitecture());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.SingleImageName.toString(), cmd.getSingleImageName());
            requestJson.put("uuid", String.valueOf(cmd.getTemplateId()));

            s_logger.debug("Register template request: " + requestJson.toString());

            requestJson.put(SECRET_KEY, _password);

            HttpPost registerTemplateRequest = new HttpPost("/registertemplate");

            StringEntity entity = new StringEntity(requestJson.toString());
            registerTemplateRequest.setEntity(entity);
            registerTemplateRequest.setHeader("Content-type", "application/json");

            HttpResponse response = executeHttpRequest(registerTemplateRequest);

            JSONObject jsonObject = new JSONObject(EntityUtils.toString(response.getEntity()));

            s_logger.info("Got reponse " + jsonObject.toString() + "from host " + _ip);

            if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) { //error importing image
                String wdsError = jsonObject.getString("message");
                Answer answer = new Answer(cmd, false, "Error during import image " + wdsError);
                answer.setContextParam(WdsTemplateAdapter.WdsAnswerCallbackParams.inProgress.toString(), String.valueOf(Boolean.FALSE));
                return answer;
            }

            registerTemplateRequest.releaseConnection();

            String status = jsonObject.getString("status");

            Answer ans = null;

            if(status.equalsIgnoreCase(WdsTemplateAdapter.WdsAgentResponse.InProgress.toString())) {
                ans = new Answer(cmd, true, status);
                ans.setContextParam(WdsTemplateAdapter.WdsAnswerCallbackParams.inProgress.toString(), String.valueOf(Boolean.TRUE));
            } else if(status.equalsIgnoreCase(WdsTemplateAdapter.WdsAgentResponse.Pass.toString())) {
                ans = new Answer(cmd, true, status);
                ans.setContextParam(WdsTemplateAdapter.WdsAnswerCallbackParams.inProgress.toString(), String.valueOf(Boolean.FALSE));
                ans.setContextParam(WdsTemplateAdapter.WdsPrestageParams.WdsClientUnattend.toString(), jsonObject.getString(WdsTemplateAdapter.WdsPrestageParams.WdsClientUnattend.toString()));
                ans.setContextParam(WdsTemplateAdapter.WdsPrestageParams.BootImagePath.toString(), jsonObject.getString(WdsTemplateAdapter.WdsPrestageParams.BootImagePath.toString()));
            } else if(status.equalsIgnoreCase(WdsTemplateAdapter.WdsAgentResponse.Fail.toString())) { // should not hit, will not get 200 in case of fail
                ans = new Answer(cmd, false, status);
                ans.setContextParam(WdsTemplateAdapter.WdsAnswerCallbackParams.inProgress.toString(), String.valueOf(Boolean.FALSE));
            }

            return ans;

        } catch (ClientProtocolException e) {
            return new Answer(cmd, e);
        } catch (IOException e) {
            return new Answer(cmd, e);
        } catch (JSONException e) {
            return new Answer(cmd, e);
        } catch (Exception e) {
            return new Answer(cmd, e);
        }
    }

    private Answer execute(RemoveImageCommand cmd) {
        try {

            JSONObject requestJson = new JSONObject();

            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.InstallImageFile.toString(), cmd.getInstallImageFile());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.BootImageFile.toString(), cmd.getBootImageFile());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.BootImageName.toString(), cmd.getBootImageName());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.InstallImageName.toString(), cmd.getInstallImageName());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.ClientUnattendFile.toString(), cmd.getClientUnattendFile());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.ImageGroupName.toString(), cmd.getImageGroupName());
            requestJson.put(WdsTemplateAdapter.WdsTemplateParams.Architecture.toString(), cmd.getArchitecture());
            requestJson.put("uuid", String.valueOf(cmd.getTemplateId()));

            s_logger.debug("Delete template request: " + requestJson.toString());

            requestJson.put(SECRET_KEY, _password);

            HttpPost deleteTemplateRequest = new HttpPost("/deletetemplate");

            StringEntity entity = new StringEntity(requestJson.toString());
            deleteTemplateRequest.setEntity(entity);
            deleteTemplateRequest.setHeader("Content-type", "application/json");

            HttpResponse response = executeHttpRequest(deleteTemplateRequest);

            JSONObject jsonObject = new JSONObject(EntityUtils.toString(response.getEntity()));

            if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) { //error removing image
                String wdsError = jsonObject.getString("message");
                return new Answer(cmd, false, "Error during import image " + wdsError);
            }

            deleteTemplateRequest.releaseConnection();

            String status = jsonObject.getString("status");

            boolean success = false;

            if(status.equalsIgnoreCase(WdsTemplateAdapter.WdsAgentResponse.Pass.toString())) {
                success = true;
            }

            Answer ans = new Answer(cmd, success, status);

            return ans;

        } catch (ClientProtocolException e) {
            return new Answer(cmd, e);
        } catch (IOException e) {
            return new Answer(cmd, e);
        } catch (JSONException e) {
            return new Answer(cmd, e);
        }
    }

    private void initializeClient() throws ConfigurationException {
        targetHost = new HttpHost(_ip, PORT, "https");  // TODO: make configurable

        Scheme newScheme;

        try {
            SSLContext sslContext = SSLContext.getInstance("SSL");

            sslContext.init(null, new TrustManager[] { new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(X509Certificate[] certs,
                                               String authType) {
                }

                public void checkServerTrusted(X509Certificate[] certs,
                                               String authType) {
                }
            } }, new SecureRandom());

            SSLSocketFactory sf = new SSLSocketFactory(sslContext,
                    new AllowAllHostnameVerifier());

            newScheme = new Scheme(HttpScheme.HTTPS.toString(), PORT, sf);

            SchemeRegistry schemeRegistry = new SchemeRegistry();

            schemeRegistry.register(newScheme);

            PoolingClientConnectionManager connectionManager = new PoolingClientConnectionManager(
                    schemeRegistry);

            connectionManager.setMaxTotal(500); // TODO make configurable
            connectionManager.setDefaultMaxPerRoute(50); // TODO make configurable

            HttpParams params = new BasicHttpParams();
            HttpConnectionParams.setConnectionTimeout(params, 60000);
            HttpConnectionParams.setSoTimeout(params, 60000);

            httpClient = new DefaultHttpClient(connectionManager, params);
        } catch (Exception e) {
            throw new ConfigurationException("Error while initializing client");
        }

    }

    private HttpResponse executeHttpRequest(HttpRequestBase request) throws IOException {
        HttpResponse response = httpClient.execute(targetHost, request);
        return response;
    }

    private String buildGetRequestPath(String basePath, List<NameValuePair> queryParameters) throws URISyntaxException {
        URIBuilder builder = new URIBuilder();
        builder.setPath(basePath);
        for(NameValuePair pair : queryParameters) {
            builder.addParameter(pair.getName(), pair.getValue());
        }
        return builder.build().toString().replaceAll("\\+", "%20");
    }
}