// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Automatically generated by addcopyright.py at 01/29/2013
// Apache License, Version 2.0 (the "License"); you may not use this
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.moonshot.dao;

import com.cloud.moonshot.model.MoonShotNodeVO;
import com.cloud.utils.Pair;
import com.cloud.utils.db.DB;
import com.cloud.utils.db.Filter;
import com.cloud.utils.db.GenericDaoBase;
import com.cloud.utils.db.SearchBuilder;
import com.cloud.utils.db.SearchCriteria;

import javax.annotation.PostConstruct;
import javax.ejb.Local;
import java.util.List;

/**
 * Created by Raghav on 8/13/2015.
 */
@Local(value = {MoonShotNodeDao.class})
@DB()
public class MoonShotNodeDaoImpl extends GenericDaoBase<MoonShotNodeVO, Long> implements MoonShotNodeDao {

    protected SearchBuilder<MoonShotNodeVO> MacAddressSearch;

    protected SearchBuilder<MoonShotNodeVO> ChassisIdSearch;

    public MoonShotNodeDaoImpl() {

    }

    @PostConstruct
    protected void init() {
        MacAddressSearch = createSearchBuilder();
        MacAddressSearch.and("macAddress", MacAddressSearch.entity().getMacAddress(), SearchCriteria.Op.EQ);
        MacAddressSearch.done();

        ChassisIdSearch = createSearchBuilder();
        ChassisIdSearch.and("moonshotChassisId", ChassisIdSearch.entity().getMoonshotChassisId(), SearchCriteria.Op.EQ);
        ChassisIdSearch.done();
    }

    @Override
    public MoonShotNodeVO findByMacAddress(String macAddress) {
        SearchCriteria<MoonShotNodeVO> sc = MacAddressSearch.create();
        sc.setParameters("macAddress", macAddress);
        return findOneBy(sc);
    }

    @Override
    public Pair<List<MoonShotNodeVO>, Integer> searchAndCountByChassisId(long chassisId, Filter filter) {
        SearchCriteria<MoonShotNodeVO> sc = ChassisIdSearch.create();
        sc.setParameters("moonshotChassisId", chassisId);
        return searchAndCount(sc, filter);
    }


}
