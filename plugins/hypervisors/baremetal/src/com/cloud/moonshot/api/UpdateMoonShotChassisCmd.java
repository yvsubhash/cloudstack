// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Automatically generated by addcopyright.py at 01/29/2013
// Apache License, Version 2.0 (the "License"); you may not use this
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.moonshot.api;

import com.cloud.moonshot.manager.MoonShotBareMetalManager;
import org.apache.cloudstack.acl.RoleType;
import org.apache.cloudstack.api.APICommand;
import org.apache.cloudstack.api.ApiErrorCode;
import org.apache.cloudstack.api.BaseAsyncCmd;
import org.apache.cloudstack.api.Parameter;
import org.apache.cloudstack.api.ServerApiException;
import org.apache.cloudstack.api.response.SuccessResponse;
import org.apache.cloudstack.context.CallContext;
import org.apache.log4j.Logger;

import javax.inject.Inject;

/**
 * Created by Raghav on 8/13/2015.
 */
@APICommand(name = "updateMoonShotChassis", description = "Updates Moonshot Chassis", responseObject = SuccessResponse.class,
        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false, authorized = {RoleType.Admin})
public class UpdateMoonShotChassisCmd extends BaseAsyncCmd {

    private static final String s_name = "updatemoonshotchassisresponse";

    public static final Logger s_logger = Logger.getLogger(UpdateMoonShotChassisCmd.class);

    @Inject
    MoonShotBareMetalManager _moonShotBareMetalMgr;

    @Parameter(name = "id", required = true, description = "Id of the moonshot chassis to be updated")
    private String id;

    @Parameter(name = "url", required = false, description = "URL of Moonshot Chassis, should not be passed when passing id")
    private String url;

    @Parameter(name = "username", required = false, description = "Username of Moonshot Chassis, should not be passed when passing id")
    private String username;

    @Parameter(name = "password", required = false, description = "Password of Moonshot Chassis, should not be passed when passing id")
    private String password;

    public UpdateMoonShotChassisCmd() {
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public String getCommandName() {
        return s_name;
    }

    @Override
    public long getEntityOwnerId() {
        return CallContext.current().getCallingAccount().getId();
    }

    @Override
    public String getEventType() {
        return "BAREMETAL.CHASSIS.UPDATE";
    }

    @Override
    public String getEventDescription() {
        return "Updating Moonshot Chassis";
    }

    @Override
    public void execute() {
        try {
            boolean result = _moonShotBareMetalMgr.updateMoonshotChassis(this);
            if (result) {
                SuccessResponse response = new SuccessResponse(getCommandName());
                setResponseObject(response);
            } else {
                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, "Failed to update moonshot chassis");
            }
        } catch (Exception e) {
            s_logger.warn(String.format("unable to update Moonshot Chassis with id : %s", getId()), e);
            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());
        }
    }
}
